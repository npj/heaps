
==================== FINAL INTERFACE ====================
2016-02-08 18:15:29.130817 UTC

interface heaps_D84gs2t4foVLGrEFu7URZk:Data.Heap.Leftist 7103
  interface hash: 61ef3a0b3b6c5aee7c2d18c23468b25c
  ABI hash: 408447edb42e9b6e287993296d32b916
  export-list hash: bad8fa05a580dbb1122856e5fa1470d2
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 29ef636f57b292ea786a4292ff6ad6c3
  sig of: Nothing
  used TH splices: False
  where
exports:
  Data.Heap.Leftist.Leftist
module dependencies: Data.Heap Data.Tree
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  Data.Heap c316440dee0b0f6f3d5c9bb0d94acc61
  exports: 72654de8a7eb46b0acfe1267160e71ea
  BinaryHeap c6706fc54da84cb03856b41e78dcdc65
  Heap 59402278e0e614775a420ce522ce481b
  Max 5fda595bbb67ad81b64af8551b684ea1
  Min 3f1621155db28544ed40377a3bd1fa2f
  Policy 7170b7ff5fec092231c5184299d62f4a
  empty 176aec139eceee13bf29a273bc6984d1
  insert 3acb7267f7249628ba8f71bdcef6fef9
  isEmpty 0d2b658e703301bcba63c38ed34d2ed7
  remove 71af70416e96c8ca5db7002eae8366a5
  value 26957c9b158a78c950ce3ed4e876e5df
import  -/  Data.Tree 9d66cae20ece06ae4f87f05558fc5f20
  exports: 046b59743458e083a149366fc880a86c
  BinaryTree 1858445b33a234e30535076559c21dfc
  Empty f2323d700eed924a6c33feb640997b30
  isEmpty 4894d40cc0a38a426b05f4a1f06a94c7
  left 6985edc31d38d1133a0ea310c98612fd
  right 2805299a3fc259ba906c3e37dd1afbf8
  value 9434b142b0b44b47b3d2dfe982c54a38
fd924e4ba3d4b6dde3b13fc823b6baff
  $fBinaryHeapLeftist ::
    Data.Heap.BinaryHeap Data.Heap.Leftist.Leftist
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Heap.Leftist.Leftist
                  Data.Heap.Leftist.$fBinaryTreeLeftist
                  Data.Heap.Leftist.$fHeapLeftist -}
fd924e4ba3d4b6dde3b13fc823b6baff
  $fBinaryTreeLeftist ::
    Data.Tree.BinaryTree Data.Heap.Leftist.Leftist
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Heap.Leftist.Leftist
                  Data.Heap.Leftist.$fEmptyLeftist
                  Data.Heap.Leftist._left
                  Data.Heap.Leftist._right -}
fd924e4ba3d4b6dde3b13fc823b6baff
  $fEmptyLeftist :: Data.Tree.Empty Data.Heap.Leftist.Leftist
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Heap.Leftist.Leftist
                  Data.Heap.Leftist._value
                  Data.Heap.Leftist._isEmpty -}
fd924e4ba3d4b6dde3b13fc823b6baff
  $fHeapLeftist :: Data.Heap.Heap Data.Heap.Leftist.Leftist
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Heap.Leftist.Leftist
                  Data.Heap.Leftist.Nil
                  Data.Heap.Leftist._isEmpty
                  Data.Heap.Leftist._value
                  Data.Heap.Leftist._insert
                  Data.Heap.Leftist._remove -}
90ff41ac7d294b6460ca286520e966db
  $fHeapLeftist1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
fd924e4ba3d4b6dde3b13fc823b6baff
  $fHeapLeftist2 :: Data.Heap.Leftist.Leftist a
  {- Strictness: b -}
fd924e4ba3d4b6dde3b13fc823b6baff
  data Leftist a
    = Nil Data.Heap.Policy
    | Node Data.Heap.Policy
           GHC.Types.Int
           a
           (Data.Heap.Leftist.Leftist a)
           (Data.Heap.Leftist.Leftist a)
fd924e4ba3d4b6dde3b13fc823b6baff
  _insert ::
    GHC.Classes.Ord a =>
    a -> Data.Heap.Leftist.Leftist a -> Data.Heap.Leftist.Leftist a
  {- Arity: 3,
     Strictness: <L,U(A,A,C(C1(U)),A,C(C1(U)),A,A,A)><L,U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   $dOrd :: GHC.Classes.Ord a
                   v :: a
                   heap :: Data.Heap.Leftist.Leftist a ->
                 case heap of wild {
                   Data.Heap.Leftist.Nil ipv -> Data.Heap.Leftist.$fHeapLeftist2 @ a
                   Data.Heap.Leftist.Node p ds ds1 ds2 ds3
                   -> Data.Heap.Leftist.merge
                        @ a
                        $dOrd
                        wild
                        (Data.Heap.Leftist.Node
                           @ a
                           p
                           Data.Heap.Leftist.$fHeapLeftist1
                           v
                           (Data.Heap.Leftist.Nil @ a p)
                           (Data.Heap.Leftist.Nil @ a p)) }) -}
fd924e4ba3d4b6dde3b13fc823b6baff
  _isEmpty :: Data.Heap.Leftist.Leftist a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ds :: Data.Heap.Leftist.Leftist a ->
                 case ds of wild {
                   Data.Heap.Leftist.Nil ds1 -> GHC.Types.True
                   Data.Heap.Leftist.Node ipv ipv1 ipv2 ipv3 ipv4
                   -> GHC.Types.False }) -}
fd924e4ba3d4b6dde3b13fc823b6baff
  _left :: Data.Heap.Leftist.Leftist a -> Data.Heap.Leftist.Leftist a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ds :: Data.Heap.Leftist.Leftist a ->
                 case ds of wild {
                   Data.Heap.Leftist.Nil p -> Data.Heap.Leftist.Nil @ a p
                   Data.Heap.Leftist.Node ds1 ds2 ds3 lt ds4 -> lt }) -}
fd924e4ba3d4b6dde3b13fc823b6baff
  _remove ::
    GHC.Classes.Ord a =>
    Data.Heap.Leftist.Leftist a
    -> (GHC.Base.Maybe a, Data.Heap.Leftist.Leftist a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,A,C(C1(U)),A,C(C1(U)),A,A,A)><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a w :: GHC.Classes.Ord a w1 :: Data.Heap.Leftist.Leftist a ->
                 (Data.Heap.Leftist._value @ a w1,
                  Data.Heap.Leftist.merge
                    @ a
                    w
                    (Data.Heap.Leftist._left @ a w1)
                    (Data.Heap.Leftist._right @ a w1))) -}
fd924e4ba3d4b6dde3b13fc823b6baff
  _right ::
    Data.Heap.Leftist.Leftist a -> Data.Heap.Leftist.Leftist a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ds :: Data.Heap.Leftist.Leftist a ->
                 case ds of wild {
                   Data.Heap.Leftist.Nil p -> Data.Heap.Leftist.Nil @ a p
                   Data.Heap.Leftist.Node ds1 ds2 ds3 ds4 rt -> rt }) -}
fd924e4ba3d4b6dde3b13fc823b6baff
  _value :: Data.Heap.Leftist.Leftist a -> GHC.Base.Maybe a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ds :: Data.Heap.Leftist.Leftist a ->
                 case ds of wild {
                   Data.Heap.Leftist.Nil ipv -> GHC.Base.Nothing @ a
                   Data.Heap.Leftist.Node ds1 ds2 r ds3 ds4
                   -> GHC.Base.Just @ a r }) -}
fd924e4ba3d4b6dde3b13fc823b6baff
  merge ::
    GHC.Classes.Ord a =>
    Data.Heap.Leftist.Leftist a
    -> Data.Heap.Leftist.Leftist a -> Data.Heap.Leftist.Leftist a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,A,C(C1(U)),A,C(C1(U)),A,A,A)><S,1*U><S,1*U> -}
instance Data.Heap.BinaryHeap [Data.Heap.Leftist.Leftist]
  = Data.Heap.Leftist.$fBinaryHeapLeftist
instance Data.Tree.BinaryTree [Data.Heap.Leftist.Leftist]
  = Data.Heap.Leftist.$fBinaryTreeLeftist
instance Data.Tree.Empty [Data.Heap.Leftist.Leftist]
  = Data.Heap.Leftist.$fEmptyLeftist
instance Data.Heap.Heap [Data.Heap.Leftist.Leftist]
  = Data.Heap.Leftist.$fHeapLeftist
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

